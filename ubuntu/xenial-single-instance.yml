---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Xenial (20161214 AMI Build) Ensemble Rails App"

Parameters:
  ## Domain Configuration
  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  SSLCertificateARN:
    Type: String
    Default: ''
    Description: SSL Certficate ARN for SSL Certficate

###############################################################################
# Instance and Network Configuration
###############################################################################
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.31.48.0/24
    Description: Subnet A CIDR Block

  CIDRB:
    Type: String
    Default: 172.31.49.0/24
    Description: Subnet B CIDR Block

  DBSnapShot:
    Type: String
    Default: ''
    Description: Enter ARN of DB Snapshot to Create Database From (Leave blank to create a fresh database)

  ## Ensemble Configuration
  MetricsSubdomain:
    Type: String
    Default: metrics-test
    AllowedValues:
      - metrics-a
      - metrics-b
      - metrics-test
    Description: subdomain/prefix that is combined with the hosted zone entered

  ## Database Configuration
  DBUser:
    Type: String
    Default: ''
    Description: Enter DB User Name (Required)

  DBPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter DB Password (Required)

  DBInstanceType:
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
    ConstraintDescription: must be a valid Postgresql instance type.

  DBPublic:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select True or False if you want your Database public facing

  DBPublicCIDR:
    Type: String
    Default: ''
    Description: Enter CIDR Range for Public Access (e.g.; 192.168.0.1/32, 172.33.0.0/16)

  DBMultiAZ:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select True or False for Multi Availability Zone DB Setup

  DBURL:
    Type: String
    Default: ''
    Description: Enter DB URL or VIP (External/Existing Only - Leave Empty to ignore)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Instance & Network Configuration
      Parameters:
        - InstanceType
        - KeyName
        - VPC
        - SSHSecurityGroup
        - CIDRA
      Label:
        default: Metrics Configuration
      Parameters:
        - MetricsSubdomain
    -
      Label:
        default: Database Configuration
      Parameters:
        - DBUser
        - DBPassword
        - DBInstanceType
        - DBPublic
        - DBPublicCIDR
        - DBMultiAZ
        - DBURL

Conditions:
  DBCon:
    !Equals [ !Ref DBURL, '' ]
  # Set necessary items if Snapshot ID present
  DBSnapCon:
    !Equals [ !Ref DBSnapShot, '' ]
  DBPublicTrue:
    !Equals [ !Ref DBPublic, 'true' ]
  DBPublicFalse:
    !Equals [ !Ref DBPublic, 'false' ]

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-b7a114d7
    eu-west-1:
      HVM64: ami-6f587e1c

Resources:
  # Create the necessary subnets for ELB
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref CIDRB
      Tags:
        - Key: Name
          Value: Public-Subnet-B
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  # Create the necessary subnet for RDS PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: DBCon
    Properties:
      DBSubnetGroupDescription: "Metrics DB Subnet Group"
      SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
      Tags:
        - Key: Name
          Value: !Sub "${MetricsSubdomain} DB Subnet Group"

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Condition: DBCon
    Condition: DBPublicFalse
    Properties:
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref ServerSecurityGroup
      GroupDescription: "Metrics Database Access Group"

  DBSecurityGroupPublic:
    Type: AWS::RDS::DBSecurityGroup
    Condition: DBCon
    Condition: DBPublicTrue
    Properties:
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref ServerSecurityGroup
        - CIRDIP: !Ref DBPublicCIDR
      GroupDescription: "Metrics Database Access Group w/ Public"


  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

###############################################################################
# PostgreSQL DB
###############################################################################

  MetricsDB:
    Type: AWS::RDS::DBInstance
    Condition: DBCon
    DeletionPolicy: Delete
    Properties:
      DBName: !If [ DBSnapCon, 'metricsdb', '' ]
      AllocatedStorage: 50
      DBInstanceIdentifier: !Sub ${MetricsSubdomain}-db
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceType
      DBSnapshotIdentifier: !Ref DBSnapShot
      MonitoringInterval: 5
      MultiAZ: !Ref DBMultiAZ
      Engine: postgres
      EngineVersion: 9.5.4
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 14
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: !If [ DBPublicTrue, true, false ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-pgdb

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # Just a placeholder role, please don't use this for real!
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ServerSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub": 
            - |
              #!/bin/bash -xev
              ##########################################################
              # Upgrade OS & Install Dependencies
              ##########################################################
              apt-get update && apt-get -y upgrade
              apt-get install -y wget curl python-setuptools python-pip git
              ##########################################################
              # Global Variable Set
              ##########################################################
              export DEBIAN_FRONTEND=noninteractive
              export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              export STACKNAME='${AWS::StackName}'
              ##########################################################
              # Install cfn bootstraping tools
              ##########################################################
              if [ -z $(command -v cfn-signal) ]; then
                  easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              fi
              ##########################################################
              # Install ruby
              ##########################################################
              apt-get install -y git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev nodejs
              #cd ~
              #wget http://ftp.ruby-lang.org/pub/ruby/2.2/ruby-2.2.6.tar.gz
              #tar -xzvf ruby-2.2.6.tar.gz
              #cd ruby-2.2.6/
              #./configure
              #make
              #make install
              #ruby -v
              apt-get install -y ruby ruby-dev
              gem install bundler
              gem install rails -v 5.0.1
              ##########################################################
              # Install node
              ##########################################################
              curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
              apt-get install -y nodejs
              ##########################################################
              # Install postgresql
              ##########################################################
              sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
              wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
              apt-get update && apt-get -y upgrade
              apt-get install -y postgresql-common postgresql-9.5 libpq-dev
              ##########################################################
              # Install Rails App
              ##########################################################
              cd /opt
              git clone https://github.com/HearstAT/ensemble.git
              cd ensemble/
              bundle install --without development
              # update config/secrets.yml
              #SECRET_KEY_BASE="$(bundle exec rake secret RAILS_ENV=production)"
              #export SECRET_KEY_BASE
              sed -i '/.*SECRET_KEY_BASE.*/c\'"  secret_key_base: `bundle exec rake secret RAILS_ENV=production`"'' /opt/ensemble/config/secrets.yml
              bundle exec bin/rails assets:precompile RAILS_ENV=production
              ##########################################################
              # Configure postgresql
              ##########################################################
              sed -i '/.*update-me.rds.amazonaws.com.*/c\'"  host: ${DBENDPOINT}"'' /opt/ensemble/config/database.yml
              bundle exec rake db:migrate RAILS_ENV=production
              bundle exec rails s -e production --binding 0.0.0.0 -d
              crontab -l | { cat; echo "@reboot sleep 60;cd /opt/ensemble/;sudo -u ubuntu sudo /usr/local/bin/bundle exec rails s -e production --binding 0.0.0.0 -d >> /var/log/syslog"; } | crontab -
              ##########################################################
              # Helper function to set wait timer
              ##########################################################
              error_exit()
              {
                cfn-signal -e 1 -r "$1" "${WaitHandle}"
                exit 1
              }
              export -f error_exit
              ##########################################################
              # Send Success Signal to CFN Wait Handle
              ##########################################################
              /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${WaitHandle}"
              ##########################################################
              # Reboot After Success for all updates made
              ##########################################################
              reboot
            - { DBENDPOINT: !If [ DBCon, !GetAtt MetricsDB.Endpoint.Address, !Ref DBURL ] }
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
